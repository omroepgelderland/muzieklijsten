"use strict";(self.webpackChunkmuzieklijsten=self.webpackChunkmuzieklijsten||[]).push([[884],{339:function(e,t,s){s(125);var i=s(601),a=s(926),n=s(936);var l=class{listeners=[];listenersOncer=[];on=e=>(this.listeners.push(e),{dispose:()=>this.off(e)});once=e=>{this.listenersOncer.push(e)};off=e=>{var t=this.listeners.indexOf(e);t>-1&&this.listeners.splice(t,1)};emit=e=>{if(this.listeners.forEach((t=>t(e))),this.listenersOncer.length>0){const t=this.listenersOncer;this.listenersOncer=[],t.forEach((t=>t(e)))}};pipe=e=>this.on((t=>e.emit(t)))},r=s(692);class d{lijst_id;e_modal;$modal;e_totaal_aantal_stemmen;e_totaal_aantal_stemmers;e_filters_form;e_resultaten_tabel;resultaten_nummers;totaal_aantal_stemmen;constructor(e,t){this.lijst_id=e,this.resultaten_nummers={},this.totaal_aantal_stemmen=0,this.e_modal=h.cloneNode(!0),this.e_totaal_aantal_stemmen=this.e_modal.getElementsByClassName("totaal-aantal-stemmen").item(0),this.e_totaal_aantal_stemmers=this.e_modal.getElementsByClassName("totaal-aantal-stemmers").item(0),this.e_filters_form=this.e_modal.querySelector("form.filters"),this.e_filters_form.addEventListener("submit",this.filter.bind(this)),this.e_filters_form.addEventListener("reset",this.filter_reset.bind(this)),this.e_resultaten_tabel=this.e_modal.querySelector(".resultaten-tabel"),this.e_resultaten_tabel.id=a.Df(12),this.set_totaal_aantal_stemmers(),this.maak_resultaten_tabel();for(const e of this.e_modal.querySelectorAll(".lijst-naam"))e.textContent=t;document.getElementsByTagName("body").item(0).appendChild(this.e_modal),this.$modal=r(this.e_modal),this.$modal.modal({backdrop:!0,focus:!0,keyboard:!0}),this.$modal.on("hidden.bs.modal",(e=>{this.e_modal.remove()})),this.e_modal.addEventListener("click",this.click_handler.bind(this)),this.e_modal.addEventListener("change",this.change_handler.bind(this)),this.$modal.modal("show")}async maak_resultaten_tabel(){const e=n.b("get_resultaten_labels",{lijst:this.lijst_id}),t=await n.b("get_resultaten",{lijst:this.lijst_id});this.totaal_aantal_stemmen=0;for(const s of t){const t=new m(this,this.e_resultaten_tabel,e,s.stemmen,s.nummer);t.on_stem_verwijderd.on(this.stem_verwijderd_handler.bind(this)),t.on_verwijderd.on(this.nummer_verwijderd_handler.bind(this)),this.resultaten_nummers[s.nummer.id]=t,this.add_totaal_aantal_stemmen(s.stemmen.length)}}add_totaal_aantal_stemmen(e){this.totaal_aantal_stemmen+=e,this.e_totaal_aantal_stemmen.innerText=this.totaal_aantal_stemmen}async set_totaal_aantal_stemmers(){const e={lijst:this.lijst_id};this.e_totaal_aantal_stemmers.innerText=await n.b("get_totaal_aantal_stemmers",e)}stem_verwijderd_handler(){this.add_totaal_aantal_stemmen(-1),this.set_totaal_aantal_stemmers()}nummer_verwijderd_handler(e){this.add_totaal_aantal_stemmen(-e),this.set_totaal_aantal_stemmers()}async filter(e){e.preventDefault();let t=this.e_filters_form.elements["filter-nummers"].value.toLowerCase(),s=this.e_filters_form.elements["filter-stemmers"].value.toLowerCase();t.length<3&&(t="",this.e_filters_form.elements["filter-nummers"].value=""),s.length<3&&(s="",this.e_filters_form.elements["filter-stemmers"].value="");for(const[e,i]of Object.entries(this.resultaten_nummers))i.filter(t,s,this.get_van(),this.get_tot())}filter_reset(e){for(const e of this.e_filters_form.elements)"text"!==e.type&&"date"!==e.type||(e.value="");this.filter(e)}click_handler(e){const t=e.target;t instanceof HTMLElement&&(t.closest(".stem-verwijderen")&&this.stem_verwijderen_handler(t.closest(".stem-verwijderen")),t.closest(".nummer")&&this.toggle_nummer_stemmen_handler(t.closest(".nummer")))}change_handler(e){const t=e.target;t instanceof HTMLElement&&t.closest(".behandeld-check")&&this.check_behandeld_handler(t.closest(".behandeld-check"))}toggle_nummer_stemmen_handler(e){const t=Number.parseInt(e.getAttribute("data-nummer-id"));this.resultaten_nummers[t].toggle()}async stem_verwijderen_handler(e){const t=Number.parseInt(e.closest("[data-stemmer-id]").getAttribute("data-stemmer-id")),s=Number.parseInt(e.closest("[data-nummer-id]").getAttribute("data-nummer-id")),i=this.resultaten_nummers[s].get_stem(t);await i.verwijderen()}async check_behandeld_handler(e){const t=Number.parseInt(e.closest("[data-stemmer-id]").getAttribute("data-stemmer-id")),s=Number.parseInt(e.closest("[data-nummer-id]").getAttribute("data-nummer-id")),i=this.resultaten_nummers[s].get_stem(t);await i.behandeld_handler()}get_van(){const e=new Date(this.e_filters_form.elements.van.value);return isNaN(e)?null:(e.setHours(0),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),e)}get_tot(){const e=new Date(this.e_filters_form.elements.tot.value);return isNaN(e)?null:(e.setDate(e.getDate()+1),e.setHours(0),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),e)}}class m{resultaten_modal;e_container;resultaten_stemmen;e_tr_uitklap;e_tr_gegevens;e_aantal_stemmen;nummer_id;titel;artiest;on_stem_verwijderd;on_verwijderd;is_zichtbaar;labels_promise;stemmen;stemmen_gefilterd;constructor(e,t,s,i,a){this.resultaten_stemmen={},this.on_stem_verwijderd=new l,this.on_verwijderd=new l,this.resultaten_modal=e,this.e_container=t,this.is_zichtbaar=!0,this.labels_promise=s,this.stemmen=this.stemmen_gefilterd=i,this.stemmen_filter=null,this.e_tr_uitklap=_.item(0).cloneNode(!0),this.e_aantal_stemmen=this.e_tr_uitklap.getElementsByClassName("aantal-stemmen").item(0),this.e_container.appendChild(this.e_tr_uitklap),this.set_nummer(a),this.stemmen.length>0&&this.e_tr_uitklap.classList.add("heeft-stemmen"),this.update_aantal_stemmen(),this.update_behandeld()}set_nummer(e){let{id:t,titel:s,artiest:i,is_vrijekeuze:a}=e;this.nummer_id=t,this.titel=s,this.artiest=i,this.e_tr_uitklap.id=`nummer-${this.nummer_id}`,this.e_tr_uitklap.setAttribute("data-nummer-id",this.nummer_id);for(const e of this.e_tr_uitklap.getElementsByClassName("nummer-titel"))e.appendChild(document.createTextNode(this.titel));for(const e of this.e_tr_uitklap.getElementsByClassName("nummer-artiest"))e.appendChild(document.createTextNode(this.artiest));a&&this.e_tr_uitklap.classList.add("vrijekeuze")}async maak_velden_labels(){if(null==this.e_tr_gegevens)throw new Error("Nummer is niet uitgeklapt");const e=this.e_tr_gegevens.querySelector("thead tr"),t=e.firstChild,s=await this.labels_promise;for(const i of s){const s=document.createElement("th");s.appendChild(document.createTextNode(i)),e.insertBefore(s,t)}}maak_stemmen(){if(null==this.e_tr_gegevens)throw new Error("Nummer is niet uitgeklapt");const e=this.e_tr_gegevens.getElementsByTagName("tbody").item(0);for(const t of this.stemmen_gefilterd){const s=new o(this,e,t);s.on_change_is_behandeld.on(this.behandeld_change_handler.bind(this,t.stemmer_id)),s.on_verwijderd.on(this.stem_verwijderd_handler.bind(this,t.stemmer_id)),this.resultaten_stemmen[t.stemmer_id]=s}}behandeld_change_handler(e,t){const s=this.stemmen.findIndex((t=>t.stemmer_id===e));this.stemmen[s].is_behandeld=t,this.update_behandeld()}update_behandeld(){this.stemmen.every((e=>e.is_behandeld))?this.e_tr_uitklap.classList.add("success"):this.e_tr_uitklap.classList.remove("success")}stem_verwijderd_handler(e){const t=this.stemmen.findIndex((t=>t.stemmer_id===e));if(-1===t)throw new Error("stem niet gevonden");this.stemmen.splice(t,1),delete this.resultaten_stemmen[e],this.on_stem_verwijderd.emit(),this.update_aantal_stemmen(),0===this.stemmen.length&&(this.inklappen(),this.e_tr_uitklap.remove())}update_aantal_stemmen(){this.e_aantal_stemmen.innerText=this.stemmen.length}filter(e,t,s,i){this.inklappen(),this.is_zichtbaar=""==e||this.titel.toLowerCase().includes(e)||this.artiest.toLowerCase().includes(e),this.is_zichtbaar&&(this.filter_stemmen({tekst:t,van:s,tot:i}),this.is_zichtbaar&=this.stemmen_gefilterd.length>0),this.is_zichtbaar?this.e_tr_uitklap.classList.remove("verborgen"):this.e_tr_uitklap.classList.add("verborgen")}filter_stemmen(e){if(""!==e.tekst||null!=e.van||null!=e.tot){this.stemmen_gefilterd=[];for(const t of this.stemmen){const s=t.velden.map((e=>e.waarde)).join(" ").toLowerCase()+t.toelichting;(""===e.tekst||null===e.tekst||s.includes(e.tekst))&&(null!=e.van&&new Date(t.timestamp)<e.van||null!=e.tot&&new Date(t.timestamp)>e.tot||this.stemmen_gefilterd.push(t))}}else this.stemmen_gefilterd=this.stemmen}is_uitgeklapt(){return null!=this.e_tr_gegevens}inklappen(){null!=this.e_tr_gegevens&&(this.e_tr_gegevens.remove(),this.e_tr_gegevens=void 0,this.e_tr_uitklap.classList.add("collapsed"))}uitklappen(){null==this.e_tr_gegevens&&(this.e_tr_uitklap.classList.remove("collapsed"),this.e_tr_gegevens=_.item(1).cloneNode(!0),this.e_tr_uitklap.after(this.e_tr_gegevens),this.e_tr_gegevens.id=`nummer-stemmers-${this.nummer_id}`,this.e_tr_gegevens.setAttribute("data-nummer-id",this.nummer_id),this.maak_velden_labels(),this.maak_stemmen())}toggle(){this.is_uitgeklapt()?this.inklappen():this.uitklappen()}get_stem(e){return this.resultaten_stemmen[e]}}class o{resultaten_nummer;e_tr;e_behandeld_input;is_behandeld;stemmer_id;metadata_voor_filter;timestamp;on_change_is_behandeld;on_verwijderd;is_zichtbaar;constructor(e,t,s){let{stemmer_id:i,ip:a,is_behandeld:n,toelichting:r,timestamp:d,velden:m}=s;this.on_change_is_behandeld=new l,this.on_verwijderd=new l,this.resultaten_nummer=e,this.stemmer_id=i,this.metadata_voor_filter=[],this.timestamp=new Date(d),this.is_behandeld=n,this.is_zichtbaar=!0,this.e_tr=u.cloneNode(!0),this.e_tr.setAttribute("data-stemmer-id",this.stemmer_id),this.e_behandeld_input=this.e_tr.getElementsByTagName("input").item(0),this.e_behandeld_input.checked=this.is_behandeld,this.update_behandeld();for(const e of this.e_tr.getElementsByClassName("stemmer-timestamp"))e.appendChild(document.createTextNode(this.timestamp.toLocaleString("nl-NL",{dateStyle:"short",timeStyle:"short"})));for(const e of this.e_tr.getElementsByClassName("stem-toelichting"))e.appendChild(document.createTextNode(r));this.maak_velden(m),this.e_tr.firstChild.setAttribute("title",a),t.appendChild(this.e_tr)}maak_velden(e){const t=this.e_tr.firstChild;for(const s of e){this.metadata_voor_filter.push(s.waarde);const e=document.createElement("td");if(null!==s.waarde&&""!==s.waarde){if("email"===s.type||"tel"===s.type){const t=document.createElement("a");let i,n="";"email"===s.type&&(n="mailto:"),"tel"===s.type&&(n="tel:"),t.setAttribute("href",`${n}${s.waarde}`),i="tel"===s.type?a.Jc(s.waarde):s.waarde,t.appendChild(document.createTextNode(i)),e.appendChild(t)}else e.appendChild(document.createTextNode(s.waarde));"email"!==s.type&&"tel"!==s.type&&"postcode"!==s.type||e.classList.add("nobreak")}this.e_tr.insertBefore(e,t)}}async behandeld_handler(){try{await n.b("stem_set_behandeld",{nummer:this.resultaten_nummer.nummer_id,lijst:this.resultaten_nummer.resultaten_modal.lijst_id,stemmer:this.stemmer_id,waarde:this.e_behandeld_input.checked}),this.is_behandeld=this.e_behandeld_input.checked,this.on_change_is_behandeld.emit(this.is_behandeld),this.update_behandeld()}catch(e){this.e_behandeld_input.checked=!this.e_behandeld_input.checked}}update_behandeld(){this.is_behandeld?this.e_tr.classList.add("success"):this.e_tr.classList.remove("success")}async verwijderen(){await n.b("verwijder_stem",{nummer:this.resultaten_nummer.nummer_id,lijst:this.resultaten_nummer.resultaten_modal.lijst_id,stemmer:this.stemmer_id}),this.e_tr.remove(),this.on_verwijderd.emit()}}class c{lijst_id;e_modal;$modal;e_form;e_velden_zichtbaar_kolom;e_velden_verplicht_kolom;on_lijst_gemaakt;on_lijst_veranderd;on_lijst_verwijderd;constructor(e){this.on_lijst_gemaakt=new l,this.on_lijst_veranderd=new l,this.on_lijst_verwijderd=new l,this.lijst_id=e,this.e_modal=p.cloneNode(!0),this.e_form=this.e_modal.getElementsByTagName("form").item(0),this.e_velden_zichtbaar_kolom=this.e_modal.getElementsByClassName("velden-zichtbaar-kolom").item(0),this.e_velden_verplicht_kolom=this.e_modal.getElementsByClassName("velden-verplicht-kolom").item(0),this.is_nieuw()?(this.e_modal.classList.add("is-nieuw"),this.maak_lege_veld_checks()):this.vul_data(),document.getElementsByTagName("body").item(0).appendChild(this.e_modal),this.e_form.addEventListener("submit",this.opslaan.bind(this)),this.e_form.elements["verwijder-lijst"].addEventListener("click",this.verwijder_lijst.bind(this)),this.$modal=r(this.e_modal),this.$modal.modal({backdrop:!0,focus:!0,keyboard:!0}),this.$modal.on("hidden.bs.modal",this.destroy.bind(this)),this.$modal.modal("show")}is_nieuw(){return void 0===this.lijst_id}async vul_data(){this.e_form.elements.lijst.value=this.lijst_id;const e=await n.b("get_beheer_lijstdata",{lijst:this.lijst_id});for(const t of this.e_modal.querySelectorAll(".lijst-naam"))t.textContent=e.naam;this.e_form.elements["is-actief"].checked=e.is_actief,this.e_form.elements.naam.value=e.naam,this.e_form.elements.minkeuzes.value=e.minkeuzes,this.e_form.elements.maxkeuzes.value=e.maxkeuzes,this.e_form.elements.vrijekeuzes.value=e.vrijekeuzes,this.e_form.elements["stemmen-per-ip"].value=e.stemmen_per_ip,this.e_form.elements["artiest-eenmalig"].checked=e.artiest_eenmalig,this.e_form.elements["mail-stemmers"].checked=e.mail_stemmers,this.e_form.elements["random-volgorde"].checked=e.random_volgorde,this.e_form.elements.recaptcha.checked=e.recaptcha,this.e_form.elements.email.value=e.email,this.e_form.elements["bedankt-tekst"].value=e.bedankt_tekst;for(const t of e.velden)this.maak_veld_checks(t)}async maak_lege_veld_checks(){const e=await n.b("get_alle_velden",{});for(const t of e)this.maak_veld_checks(t)}maak_veld_checks(e){const t=a.Df(16),s=a.Df(16),i=document.createElement("div"),n=document.createElement("label"),l=document.createElement("input"),r=document.createTextNode(e.label),d=document.createElement("div"),m=document.createElement("label"),o=document.createElement("input"),c=document.createTextNode("Verplicht");this.e_velden_zichtbaar_kolom.appendChild(i),i.appendChild(n),n.appendChild(l),n.appendChild(r),this.e_velden_verplicht_kolom.appendChild(d),d.appendChild(m),m.appendChild(o),m.appendChild(c),i.classList.add("checkbox"),d.classList.add("checkbox"),l.type="checkbox",l.id=t,l.name=`velden[${e.id}][tonen]`,l.checked=e.tonen,l.setAttribute("data-input-verplicht",s),l.addEventListener("change",this.check_verplicht.bind(this)),n.for=t,o.type="checkbox",o.id=s,o.name=`velden[${e.id}][verplicht]`,o.checked=e.verplicht,o.disabled=!e.tonen,m.for=s}async opslaan(e){e.preventDefault();const t=new FormData(this.e_form);if(this.is_nieuw())try{const e=await n.b("lijst_maken",t);this.on_lijst_gemaakt.emit({id:e,naam:t.get("naam")}),this.$modal.modal("hide")}catch(e){alert(e)}else try{await n.b("lijst_opslaan",t),this.on_lijst_veranderd.emit({id:this.lijst_id,naam:t.get("naam")}),this.$modal.modal("hide")}catch(e){alert(e)}}async verwijder_lijst(e){if(confirm("Deze lijst verwijderen?\nOok alle stemmen op nummers uit deze lijst worden verwijderd."))try{await n.b("verwijder_lijst",{lijst:this.lijst_id}),this.on_lijst_verwijderd.emit({id:this.lijst_id}),this.$modal.modal("hide")}catch(e){alert(e)}}check_verplicht(e){const t=e.target.getAttribute("data-input-verplicht"),s=document.getElementById(t);s instanceof HTMLInputElement&&(e.target.checked?s.disabled=!1:(s.disabled=!0,s.checked=!1))}destroy(){this.e_modal.remove()}}const h=a.am('<div class="modal fade resultaten-modal" role="dialog"> <div class="modal-dialog"> <div class="modal-header modal-top"> <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button> <h4 class="modal-title">Resultaten van de lijst ‘<span class="lijst-naam"></span>’</h4> </div> <div class="modal-content"> <form class="filters" autocomplete="off"> <div class="input-group"> <input type="text" name="filter-nummers" class="form-control" placeholder="Filter nummers"> </div> <div class="input-group"> <input type="text" name="filter-stemmers" class="form-control" placeholder="Filter stemmers"> </div> <div class="input-group date"> <label>van:</label> <input type="date" name="van" class="form-control"> </div> <div class="input-group date"> <label>tot:</label> <input type="date" name="tot" class="form-control"> </div> <div> <input type="submit" value="Filters toepassen" class="btn btn-default"> </div> <div> <input type="reset" value="Filters wissen" class="btn btn-default"> </div> </form> <div class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th></th> <th>Titel</th> <th>Artiest</th> <th class="text-center"><span class="totaal-aantal-stemmen"></span> stemmen<br> <span class="totaal-aantal-stemmers"></span> stemmers</th> </tr> </thead> <tbody class="resultaten-tabel"></tbody> </table> </div> </div> <div class="modal-footer modal-end"> <button type="button" class="btn btn-default" data-dismiss="modal">Sluiten</button> </div> </div> </div> ').item(0),_=a.am('<tr class="nummer hand collapsed"> <td class="text-center"> <i class="fa fa-plus-square heeft-stemmen"></i> <i class="fa fa-minus-square heeft-stemmen"></i> </td> <td class="nummer-titel"></td> <td class="nummer-artiest"></td> <td class="text-center aantal-stemmen"></td> </tr> <tr> <td class="hidden-row" colspan="5"> <div class="bs-callout bs-callout-info"> <table class="table"> <thead> <tr> <th>Aangevraagd op</th> <th>Toelichting</th> <th class="text-center">Behandeld</th> </tr> </thead> <tbody></tbody> </table> </div> </td> </tr> '),u=a.am('<tr class="stemmer"> <td class="stemmer-timestamp nobreak"></td> <td class="stem-toelichting"></td> <td class="text-center hand"> <input type="checkbox" class="hand behandeld-check"> </td> <td> <div class="hand stem-verwijderen" title="Stem verwijderen"> <i class="fa fa-times fa-1 text-danger"></i> </div> </td> </tr> ').item(0),p=a.am('<div class="modal fade lijstinstellingen beheer-modal" id="beheer" role="dialog"> <div class="modal-dialog"> <div class="modal-header modal-top"> <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button> <h4 class="modal-title"> <span class="not-is-nieuw">Beheer van de lijst ‘<span class="lijst-naam"></span>’</span> <span class="is-nieuw">Nieuwe muzieklijst</span> </h4> </div> <div class="modal-content"><div class="container-fluid beheercontainer"> <form class="form-horizontal" role="form" method="post" id="beheer-lijst"> <input type="hidden" name="lijst"> <div class="separator"></div> <div class="form-group"> <label class="control-label col-sm-2" for="naam">Naam lijst:</label> <div class="col-sm-10"> <input type="text" class="form-control" id="naam" name="naam" required> </div> </div> <div class="separator"></div> <div class="form-group"> <label class="control-label col-sm-2" for="email">E-mailadressen voor reacties: <span class="glyphicon glyphicon-info-sign pointer" title="Meerdere e-mailadressen scheiden door een komma ( , )"></span></label> <div class="col-sm-10"> <input type="text" class="form-control" id="email" name="email"> </div> </div> <div class="separator"></div> <div class="form-group"> <label class="control-label col-sm-2" for="bedankt-tekst">Tekst voor bezoekers na het stemmen: <span class="glyphicon glyphicon-info-sign pointer" title="De tekst die de stemmers te zien krijgen nadat ze hun stem hebben ingediend."></span></label> <div class="col-sm-10"> <input type="text" class="form-control" id="bedankt-tekst" name="bedankt-tekst" value="Bedankt voor je keuze." required> </div> </div> <div class="separator"></div> <div class="form-group"> <label class="control-label col-sm-2" for="velden">Velden tonen:</label> <div class="col-sm-2 velden-zichtbaar-kolom"></div> <div class="col-sm-8 velden-verplicht-kolom"></div> </div> <div class="separator"></div> <div class="form-group"> <label class="control-label col-sm-2" for="velden">Opties:</label> <div class="col-sm-10"> Minimum aantal keuzes <input type="number" class="form-control" id="minkeuzes" name="minkeuzes" min="1" required><br> Maximum aantal keuzes <input type="number" class="form-control" id="maxkeuzes" name="maxkeuzes" min="1" required><br> Aantal vrije keuzes <input type="number" class="form-control" id="vrijekeuzes" name="vrijekeuzes" min="0" required><br> Aantal stemmen per IP (leeglaten voor onbeperkt) <input type="number" class="form-control" id="stemmen-per-ip" name="stemmen-per-ip" min="1"><br> <input type="checkbox" id="is-actief" name="is-actief"> Lijst is actief (stemmen staat aan)<br> <input type="checkbox" id="artiest-eenmalig" name="artiest-eenmalig"> Artiesten eenmalig te selecteren <br> <input type="checkbox" id="recaptcha" name="recaptcha"> Re-Captcha<br> <input type="checkbox" id="mail-stemmers" name="mail-stemmers"> Stuur stemmers een e-mail nadat zij hebben gestemd<br> <input type="checkbox" id="random-volgorde" name="random-volgorde"> Toon nummers in willekeurige volgorde<br> </div> </div> <div class="separator"></div> <div class="form-group"> <div class="col-sm-2"></div> <div class="col-sm-10"> <input type="submit" class="btn btn-primary" value="Opslaan"> </div> </div> <div class="form-group beheer-bestaand"> <div class="col-sm-2"></div> <div class="col-sm-10"> <input type="button" name="verwijder-lijst" class="btn btn-danger not-is-nieuw" value="Lijst verwijderen"> </div> </div> <div class="separator beheer-bestaand"></div> </form> </div></div> <div class="modal-footer modal-end"> <button type="button" class="btn btn-default" data-dismiss="modal">Sluiten</button> </div> </div> </div> ').item(0);new class{lijst_id;lijst_naam_promise;e_body;e_lijst_select;e_geselecteerd_lijst;e_aantal_geselecteerde_nummers;geselecteerde_nummers;tabel;constructor(){this.e_body=document.getElementsByTagName("body").item(0),this.e_lijst_select=document.getElementById("lijstselect"),this.e_geselecteerd_lijst=document.getElementById("geselecteerd-lijst"),this.e_aantal_geselecteerde_nummers=document.getElementById("aantal-geselecteerde-nummers"),this.lijst_naam_promise=Promise.resolve("?"),this.geselecteerde_nummers=[],this.vul_metadata().then((()=>{const e=new URLSearchParams(document.location.search).get("lijst");for(const t of this.e_lijst_select.options)if(t.value==e){t.selected=!0,this.set_lijst(e);break}})),this.tabel=new i.A(document.getElementById("beschikbare-nummers"),{processing:!0,serverSide:!0,ajax:(e,t,s)=>{e.is_vrijekeuze=!1,a.em(e,t,s)},columnDefs:[{targets:0,searchable:!1,orderable:!1,className:"dt-body-center",render:(e,t,s,i)=>{let[a,n,l,r]=s;const d=document.createElement("input");return d.setAttribute("type","checkbox"),d.outerHTML}}],order:[1,"asc"],rowCallback:this.toon_geselecteerd.bind(this),language:{lengthMenu:"_MENU_ nummers per pagina",zeroRecords:"Geen nummers gevonden",info:"Pagina _PAGE_ van _PAGES_",infoEmpty:"Geen nummers gevonden",infoFiltered:"(gefilterd van _MAX_ totaal)",search:"Zoeken:",paginate:{first:"Eerste",last:"Laatste",next:"Volgende",previous:"Vorige"}}}),document.addEventListener("click",this.click_handler.bind(this)),document.getElementById("lijstselect").addEventListener("change",this.lijst_select_handler.bind(this)),document.getElementById("beheerknop").addEventListener("click",this.beheer_knop_handler.bind(this)),document.getElementById("nieuwknop").addEventListener("click",this.nieuw_knop_handler.bind(this)),document.getElementById("resultatenknop").addEventListener("click",this.resultaten_knop_handler.bind(this))}click_handler(e){const t=e.target;t instanceof HTMLElement&&t.closest("#beschikbare-nummers tbody>tr")&&this.checkbox_handler(t.closest("tr"))}async set_lijst(e){this.lijst_id=e;const t=new URL(location.href),s=t.searchParams;s.set("lijst",this.lijst_id),t.params=s,window.history.replaceState(null,null,t),this.e_body.classList.add("lijst-geselecteerd");for(const e of document.getElementsByClassName("bewerk-knop"))e.removeAttribute("title");const i=this.vul_lijst_metadata();this.lijst_naam_promise=i.then((e=>e.naam)),await i,this.tabel.draw()}async vul_metadata(){const e=await n.b("get_metadata",{});for(const t of document.getElementsByClassName("organisatie"))t.innerText=e.organisatie;for(const t of e.lijsten)this.e_lijst_select.add(new Option(t.naam,t.id));document.getElementById("totaal-aantal-nummers").innerText=e.totaal_aantal_nummers;for(const t of document.getElementsByClassName("nimbus-url"))t.href=e.nimbus_url}async vul_lijst_metadata(){const e=await n.b("get_lijst_metadata",{lijst:this.lijst_id});for(const t of document.getElementsByClassName("lijst-naam"))t.innerText=e.naam;document.getElementsByTagName("title").item(0).innerText=`Muzieklijsten beheer – ${e.naam}`;for(const t of document.getElementsByClassName("iframe-url"))t.value=e.iframe_url;for(const t of document.getElementsByClassName("iframe-code"))t.value=`<iframe src="${e.iframe_url}" frameborder="0" height="3000" style="width: 100%; height: 3000px; border: none;">`;this.geselecteerde_nummers=e.nummer_ids,this.vul_lijst_geselecteerde_nummers();const t=document.querySelectorAll("#beschikbare-nummers_length select, #beschikbare-nummers_filter input");for(const e of t)e.classList.add("form-control");return e}async checkbox_handler(e){const t=e.matches('input[type="checkbox"]')?e:e.querySelector('input[type="checkbox"]');let[s,i,a,n]=this.tabel.row(e).data();s=Number.parseInt(s);const l=this.geselecteerde_nummers.indexOf(s);if(-1===l)try{await this.nummer_toevoegen(s),this.geselecteerde_nummers.push(s),t.checked=!0,e.classList.add("selected"),await this.vul_lijst_geselecteerde_nummers()}catch(e){t.prop.checked=!1,alert(e)}else try{await this.nummer_verwijderen(s),this.geselecteerde_nummers.splice(l,1),t.checked=!1,e.classList.remove("selected"),await this.vul_lijst_geselecteerde_nummers()}catch(e){t.checked=!0,alert(e)}}lijst_select_handler(e){e.target.value>0?this.set_lijst(e.target.value):this.unset_lijst()}toon_geselecteerd(e,t,s){let[i,a,n,l]=t;i=Number.parseInt(i),this.geselecteerde_nummers.includes(i)&&(e.querySelector('input[type="checkbox"]').checked=!0,e.classList.add("selected"))}nummer_toevoegen(e){return n.b("lijst_nummer_toevoegen",{lijst:this.lijst_id,nummer:e})}nummer_verwijderen(e){return n.b("lijst_nummer_verwijderen",{lijst:this.lijst_id,nummer:e})}async vul_lijst_geselecteerde_nummers(){const e=await n.b("get_geselecteerde_nummers",{lijst:this.lijst_id});for(;this.e_geselecteerd_lijst.lastChild;)this.e_geselecteerd_lijst.removeChild(this.e_geselecteerd_lijst.lastChild);this.e_aantal_geselecteerde_nummers.innerText=e.length;for(const t of e){const e=document.createElement("tr");this.e_geselecteerd_lijst.appendChild(e);const s=document.createElement("td");e.appendChild(s),s.appendChild(document.createTextNode(t.titel));const i=document.createElement("td");e.appendChild(i),i.appendChild(document.createTextNode(t.artiest));const a=document.createElement("td");e.appendChild(a),a.appendChild(document.createTextNode(t.jaar??""))}}async resultaten_knop_handler(e){e.preventDefault(),new d(this.lijst_id,await this.lijst_naam_promise)}nieuw_knop_handler(e){e.preventDefault();(new c).on_lijst_gemaakt.on(this.lijst_toegevoegd.bind(this))}beheer_knop_handler(e){e.preventDefault();const t=new c(this.lijst_id);t.on_lijst_veranderd.on(this.lijst_veranderd.bind(this)),t.on_lijst_verwijderd.on(this.lijst_verwijderd.bind(this))}lijst_toegevoegd(e){this.e_lijst_select.add(new Option(e.naam,e.id,!1,!0)),this.set_lijst(e.id)}lijst_veranderd(e){this.e_lijst_select.item(this.e_lijst_select.selectedIndex).text=e.naam}lijst_verwijderd(){this.e_lijst_select.remove(this.e_lijst_select.selectedIndex),this.unset_lijst()}unset_lijst(e){this.lijst_id=void 0;const t=new URL(location.href),s=t.searchParams;s.delete("lijst"),t.params=s,window.history.replaceState(null,null,t),this.e_body.classList.remove("lijst-geselecteerd"),document.getElementsByTagName("title").item(0).innerText="Muzieklijsten beheer",this.geselecteerde_nummers=[],this.vul_lijst_geselecteerde_nummers()}}},926:function(e,t,s){s.d(t,{Df:function(){return r},Jc:function(){return l},am:function(){return n},em:function(){return a}});var i=s(936);async function a(e,t,s){t(await i.b("vul_datatables",e))}function n(e){const t=document.createElement("template");return t.innerHTML=e.trim(),t.content.children}function l(e){const t=[/^(\+31)((?:11|16|17|18|22|25|29|31|32|34|41|44|47|47|48|49|51|52|54|56|57|59|67|80|90)[0-9])([0-9]{2})([0-9]{2})([0-9]{2})$/,/^(\+31)(6)([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})$/,/^(\+31)([0-9]{2})([0-9]{3})([0-9]{2})([0-9]{2})$/];for(const s of t){let t=e.match(s);if(null!==t&&t.length>0)return t.shift(),t.join(" ")}return e}function r(e){let t="";for(;t.length<e;)t+=Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(36);return t.substring(0,e)}},936:function(e,t,s){function i(e,t){return new Promise(((s,i)=>{const n=new XMLHttpRequest;let l;n.open("POST","ajax.php",!0),n.onload=a.bind(void 0,n,s,i),n.onerror=a.bind(void 0,n,s,i),t instanceof FormData?(t.append("functie",e),l=t):(l=JSON.stringify({functie:e,...t}),n.setRequestHeader("Content-Type","application/json")),n.send(l)}))}function a(e,t,s,i){try{const i=JSON.parse(e.response);!1!==i.error?s(new Error(i.errordata)):t(i.data)}catch(t){s(new Error(e.responseText))}}s.d(t,{b:function(){return i}})}},function(e){e.O(0,[778,408],(function(){return t=339,e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,